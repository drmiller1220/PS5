aidblack_dpc, tobit(Lower = 0, Upper = 100, type.fitted="censored"),
data=training_set)
summary(tobit_race)
# storing predicted values based on test set observations; output of predict for tobit
# model is a data.frame, but is a vector for lm; for consistency, and for later use,
# we vectorize the tobit predicted values
lm_basic_predict <- predict(lm_basic, test_set, type="response")
lm_race_predict <- predict(lm_race, test_set, type="response")
tobit_basic_predict <- as.vector(predict(tobit_basic, test_set, type="response"))
tobit_race_predict <- as.vector(predict(tobit_race, test_set, type="response"))
true_values <- test_set$ft_dpc
predictions <- matrix(data=c(lm_basic_predict, lm_race_predict, tobit_basic_predict,
tobit_race_predict), ncol=4, dimnames=list(NULL,
c("lm_basic_predict", "lm_race_predict", "tobit_basic_predict",
"tobit_race_predict"))) # creating matrix of predictions
naive_values <- rep(median(test_set$ft_dpc), length(test_set$ft_dpc))
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape"))
stat_results
library(Metrics)
rmse(true_values, lm_basic_predict)
rmse(true_values, lm_race_predict)
rmse(true_values, tobit_race_predict)
rmse(true_values, tobit_basic_predict)
rmsle(true_values, lm_basic_predict)
rmsle(true_values, lm_race_predict)
rmsle(true_values, tobit_race_predict)
rmsle(true_values, tobit_basic_predict)
mad(tobit_basic_predict
)
mad(lm_basic_predict)
mad(abs_pct_error)
predicted <- predictions
true <- true_values
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
mad(abs_pct_error[,1])
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
setMethod(f="fitRstats",
definition=function(true, predicted, naive=NULL, statistics="rmse", ...){
statistics_output <- NULL
abs_error <- apply(predicted, MAR=2, FUN=function(x) abs(x - true))
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
baseline <- abs(naive-true)
if("rmse" %in% statistics){
rmse <- apply(abs_error, MAR=2, FUN=function(x) sqrt(sum(x^2)/length(x)))
statistics_output <- cbind(statistics_output, rmse)
}
if("mad" %in% statistics){
mad <- apply(abs_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, mad)
}
if("rmsle" %in% statistics){
rmsle <- apply(predicted, MAR=2, FUN=function(x) sqrt(sum((log(x+1)-log(true+1))^2)/length(true)))
statistics_output <- cbind(statistics_output, rmsle)
}
if("mape" %in% statistics){
mape <- apply(abs_pct_error, MAR=2, FUN=function(x) sum(x)/length(x))
statistics_output <- cbind(statistics_output, mape)
}
if("meape" %in% statistics){
meape <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, meape)
}
if("mrae" %in% statistics){
mrae <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x/baseline))
statistics_output <- cbind(statistics_output, mrae)
}
statistics_output <- as.matrix(statistics_output)
rownames(statistics_output) <- ifelse(colnames(predicted)==NULL, paste0("Model ",1:length(dim(statistics_output)[2])), colnames(predicted))
return(new("fitR", statistics=statistics_output))
}
)
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
stat_results
?mrae()
current.code <- as.package("fitR")
load_all(current.code)
document(current.code)
check(current.code)
install(pkg="fitR", local = TRUE)
library(fitR)
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
stat_results
install.packages("ftsa")
error(forecast=lm_basic_predict, true=true_values, method="mrae")
library(ftsa)
library(ftsa)
error(forecast=lm_basic_predict, true=true_values, method="mrae")
error(forecast=lm_basic_predict, forecastbench=naive_values, true=true_values, method="mrae")
stat_results
error(forecast=lm_basic_predict, forecastbench=naive_values, true=true_values, method="mdae")
error(forecast=lm_race_predict, forecastbench=naive_values, true=true_values, method="mdae")
error(forecast=lm_tobit_predict, forecastbench=naive_values, true=true_values, method="mdae")
error(forecast=tobit_basic_predict, forecastbench=naive_values, true=true_values, method="mdae")
error(forecast=tobit_race_predict, forecastbench=naive_values, true=true_values, method="mdae")
error(forecast=tobit_race_predict, forecastbench=naive_values, true=true_values, method="rmse")
error(forecast=tobit_race_predict, forecastbench=naive_values, true=true_values, method="mape")
error(forecast=tobit_race_predict, forecastbench=naive_values, true=true_values, method="meape")
error(forecast=tobit_race_predict, forecastbench=naive_values, true=true_values, method="mdrae")
error(forecast=tobit_race_predict, forecastbench=naive_values, true=true_values, method="relmse")
error(forecast=tobit_race_predict, forecastbench=naive_values, true=true_values, method="relmae")
sample_rows <- sample(1:nrow(anes_data_subset), size = 0.5*nrow(anes_data_subset))
# get vector of numbers from 1 to the number of rows in the data set, and then sample
# a vector of numbers half that size with which to determine our training and test sets
training_set <- anes_data_subset[sample_rows,] # training set includes all rows sampled
test_set <- anes_data_subset[-sample_rows,] # test set includes all rows not sampled
# fitting an lm model including all subsetted variables except the aidblack for the
# respondent and Obama
lm_basic <- lm(ft_dpc ~ pid_x + tea_supp_x + presapp_job_x + interest_attention +
dem_raceeth_x + gender_respondent_x, data=training_set)
summary(lm_basic)
# fitting an lm model including all subsetted variables including the aidblack for the
# respondent and Obama
lm_race <- lm(ft_dpc ~ pid_x + tea_supp_x + presapp_job_x + interest_attention +
dem_raceeth_x + gender_respondent_x + aidblack_self +
aidblack_dpc, data=training_set)
summary(lm_race)
library(VGAM) # loading package needed for tobit regression
# fitting a tobit model including all subsetted variables except the aidblack for the
# respondent and Obama
tobit_basic <- vglm(ft_dpc ~ pid_x + tea_supp_x + presapp_job_x + interest_attention +
dem_raceeth_x + gender_respondent_x,
tobit(Lower = 0, Upper = 100, type.fitted="censored"),
data=training_set)
summary(tobit_basic)
# fitting a tobit model including all subsetted variables including the aidblack for the
# respondent and Obama
tobit_race <- vglm(ft_dpc ~ pid_x + tea_supp_x + presapp_job_x + interest_attention +
dem_raceeth_x + gender_respondent_x + aidblack_self +
aidblack_dpc, tobit(Lower = 0, Upper = 100, type.fitted="censored"),
data=training_set)
summary(tobit_race)
# storing predicted values based on test set observations; output of predict for tobit
# model is a data.frame, but is a vector for lm; for consistency, and for later use,
# we vectorize the tobit predicted values
lm_basic_predict <- predict(lm_basic, test_set, type="response")
lm_race_predict <- predict(lm_race, test_set, type="response")
tobit_basic_predict <- as.vector(predict(tobit_basic, test_set, type="response"))
tobit_race_predict <- as.vector(predict(tobit_race, test_set, type="response"))
true_values <- test_set$ft_dpc
predictions <- matrix(data=c(lm_basic_predict, lm_race_predict, tobit_basic_predict,
tobit_race_predict), ncol=4, dimnames=list(NULL,
c("lm_basic_predict", "lm_race_predict", "tobit_basic_predict",
"tobit_race_predict"))) # creating matrix of predictions
naive_values <- rep(median(test_set$ft_dpc), length(test_set$ft_dpc))
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
stat_results
log(-1)
setMethod(f="fitRstats",
definition=function(true, predicted, naive=NULL, statistics="rmse", ...){
statistics_output <- NULL
abs_error <- apply(predicted, MAR=2, FUN=function(x) abs(x - true))
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
baseline <- abs(naive-true)
if("rmse" %in% statistics){
rmse <- apply(abs_error, MAR=2, FUN=function(x) sqrt(sum(x^2)/length(x)))
statistics_output <- cbind(statistics_output, rmse)
}
if("mad" %in% statistics){
mad <- apply(abs_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, mad)
}
if("rmsle" %in% statistics){
rmsle <- apply(predicted, MAR=2, FUN=function(x) sqrt(sum((log(x+1)-log(true+1))^2)/length(true)))
statistics_output <- cbind(statistics_output, rmsle)
if("Nan" %in% rmsle) print("rmsle could not be computed for some models due to negative values")
}
}
if("mape" %in% statistics){
mape <- apply(abs_pct_error, MAR=2, FUN=function(x) sum(x)/length(x))
statistics_output <- cbind(statistics_output, mape)
}
if("meape" %in% statistics){
meape <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, meape)
}
if("mrae" %in% statistics){
mrae <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x/baseline))
statistics_output <- cbind(statistics_output, mrae)
}
statistics_output <- as.matrix(statistics_output)
rownames(statistics_output) <- ifelse(colnames(predicted)==NULL, paste0("Model ",1:length(dim(statistics_output)[2])), colnames(predicted))
return(new("fitR", statistics=statistics_output))
}
)
setMethod(f="fitRstats",
definition=function(true, predicted, naive=NULL, statistics="rmse", ...){
statistics_output <- NULL
abs_error <- apply(predicted, MAR=2, FUN=function(x) abs(x - true))
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
baseline <- abs(naive-true)
if("rmse" %in% statistics){
rmse <- apply(abs_error, MAR=2, FUN=function(x) sqrt(sum(x^2)/length(x)))
statistics_output <- cbind(statistics_output, rmse)
}
if("mad" %in% statistics){
mad <- apply(abs_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, mad)
}
if("rmsle" %in% statistics){
rmsle <- apply(predicted, MAR=2, FUN=function(x) sqrt(sum((log(x+1)-log(true+1))^2)/length(true)))
statistics_output <- cbind(statistics_output, rmsle)
if("Nan" %in% rmsle){print("rmsle could not be computed for some models due to negative values")}
}
}
if("mape" %in% statistics){
mape <- apply(abs_pct_error, MAR=2, FUN=function(x) sum(x)/length(x))
statistics_output <- cbind(statistics_output, mape)
}
if("meape" %in% statistics){
meape <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, meape)
}
if("mrae" %in% statistics){
mrae <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x/baseline))
statistics_output <- cbind(statistics_output, mrae)
}
statistics_output <- as.matrix(statistics_output)
rownames(statistics_output) <- ifelse(colnames(predicted)==NULL, paste0("Model ",1:length(dim(statistics_output)[2])), colnames(predicted))
return(new("fitR", statistics=statistics_output))
}
)
setMethod(f="fitRstats",
definition=function(true, predicted, naive=NULL, statistics="rmse", ...){
statistics_output <- NULL
abs_error <- apply(predicted, MAR=2, FUN=function(x) abs(x - true))
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
baseline <- abs(naive-true)
if("rmse" %in% statistics){
rmse <- apply(abs_error, MAR=2, FUN=function(x) sqrt(sum(x^2)/length(x)))
statistics_output <- cbind(statistics_output, rmse)
}
if("mad" %in% statistics){
mad <- apply(abs_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, mad)
}
if("rmsle" %in% statistics){
rmsle <- apply(predicted, MAR=2, FUN=function(x) sqrt(sum((log(x+1)-log(true+1))^2)/length(true)))
statistics_output <- cbind(statistics_output, rmsle)
if("Nan" %in% rmsle){
print("rmsle could not be computed for some models due to negative values")
}
}
}
if("mape" %in% statistics){
mape <- apply(abs_pct_error, MAR=2, FUN=function(x) sum(x)/length(x))
statistics_output <- cbind(statistics_output, mape)
}
if("meape" %in% statistics){
meape <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, meape)
}
if("mrae" %in% statistics){
mrae <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x/baseline))
statistics_output <- cbind(statistics_output, mrae)
}
statistics_output <- as.matrix(statistics_output)
rownames(statistics_output) <- ifelse(colnames(predicted)==NULL, paste0("Model ",1:length(dim(statistics_output)[2])), colnames(predicted))
return(new("fitR", statistics=statistics_output))
}
)
setMethod(f="fitRstats",
definition=function(true, predicted, naive=NULL, statistics="rmse", ...){
statistics_output <- NULL
abs_error <- apply(predicted, MAR=2, FUN=function(x) abs(x - true))
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
baseline <- abs(naive-true)
if("rmse" %in% statistics){
rmse <- apply(abs_error, MAR=2, FUN=function(x) sqrt(sum(x^2)/length(x)))
statistics_output <- cbind(statistics_output, rmse)
}
if("mad" %in% statistics){
mad <- apply(abs_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, mad)
}
if("rmsle" %in% statistics){
rmsle <- apply(predicted, MAR=2, FUN=function(x) sqrt(sum((log(x+1)-log(true+1))^2)/length(true)))
statistics_output <- cbind(statistics_output, rmsle)
if("Nan" %in% rmsle){
print("rmsle could not be computed for some models due to negative values")
}
}
if("mape" %in% statistics){
mape <- apply(abs_pct_error, MAR=2, FUN=function(x) sum(x)/length(x))
statistics_output <- cbind(statistics_output, mape)
}
if("meape" %in% statistics){
meape <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, meape)
}
if("mrae" %in% statistics){
mrae <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x/baseline))
statistics_output <- cbind(statistics_output, mrae)
}
statistics_output <- as.matrix(statistics_output)
rownames(statistics_output) <- ifelse(colnames(predicted)==NULL, paste0("Model ",1:length(dim(statistics_output)[2])), colnames(predicted))
return(new("fitR", statistics=statistics_output))
}
)
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
stat_results
setMethod(f="fitRstats",
definition=function(true, predicted, naive=NULL, statistics="rmse", ...){
statistics_output <- NULL
abs_error <- apply(predicted, MAR=2, FUN=function(x) abs(x - true))
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
baseline <- abs(naive-true)
if("rmse" %in% statistics){
rmse <- apply(abs_error, MAR=2, FUN=function(x) sqrt(sum(x^2)/length(x)))
statistics_output <- cbind(statistics_output, rmse)
}
if("mad" %in% statistics){
mad <- apply(abs_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, mad)
}
if("rmsle" %in% statistics){
rmsle <- apply(predicted, MAR=2, FUN=function(x) sqrt(sum((log(x+1)-log(true+1))^2)/length(true)))
statistics_output <- cbind(statistics_output, rmsle)
if("NaN" %in% rmsle){
print("rmsle could not be computed for some models due to negative values")
}
}
if("mape" %in% statistics){
mape <- apply(abs_pct_error, MAR=2, FUN=function(x) sum(x)/length(x))
statistics_output <- cbind(statistics_output, mape)
}
if("meape" %in% statistics){
meape <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, meape)
}
if("mrae" %in% statistics){
mrae <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x/baseline))
statistics_output <- cbind(statistics_output, mrae)
}
statistics_output <- as.matrix(statistics_output)
rownames(statistics_output) <- ifelse(colnames(predicted)==NULL, paste0("Model ",1:length(dim(statistics_output)[2])), colnames(predicted))
return(new("fitR", statistics=statistics_output))
}
)
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
setMethod(f="fitRstats",
definition=function(true, predicted, naive=NULL, statistics="rmse", ...){
statistics_output <- NULL
abs_error <- apply(predicted, MAR=2, FUN=function(x) abs(x - true))
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
baseline <- abs(naive-true)
if("rmse" %in% statistics){
rmse <- apply(abs_error, MAR=2, FUN=function(x) sqrt(sum(x^2)/length(x)))
statistics_output <- cbind(statistics_output, rmse)
}
if("mad" %in% statistics){
mad <- apply(abs_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, mad)
}
if("rmsle" %in% statistics){
rmsle <- apply(predicted, MAR=2, FUN=function(x) sqrt(sum((log(x+1)-log(true+1))^2)/length(true)))
statistics_output <- cbind(statistics_output, rmsle)
if("NaN" %in% rmsle){
message("rmsle could not be computed for some models due to negative values")
}
}
if("mape" %in% statistics){
mape <- apply(abs_pct_error, MAR=2, FUN=function(x) sum(x)/length(x))
statistics_output <- cbind(statistics_output, mape)
}
if("meape" %in% statistics){
meape <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, meape)
}
if("mrae" %in% statistics){
mrae <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x/baseline))
statistics_output <- cbind(statistics_output, mrae)
}
statistics_output <- as.matrix(statistics_output)
rownames(statistics_output) <- ifelse(colnames(predicted)==NULL, paste0("Model ",1:length(dim(statistics_output)[2])), colnames(predicted))
return(new("fitR", statistics=statistics_output))
}
)
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
setMethod(f="fitRstats",
definition=function(true, predicted, naive=NULL, statistics="rmse", ...){
statistics_output <- NULL
abs_error <- apply(predicted, MAR=2, FUN=function(x) abs(x - true))
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
baseline <- abs(naive-true)
if("rmse" %in% statistics){
rmse <- apply(abs_error, MAR=2, FUN=function(x) sqrt(sum(x^2)/length(x)))
statistics_output <- cbind(statistics_output, rmse)
}
if("mad" %in% statistics){
mad <- apply(abs_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, mad)
}
if("rmsle" %in% statistics){
rmsle <- apply(predicted, MAR=2, FUN=function(x) sqrt(sum((log(x+1)-log(true+1))^2)/length(true)))
statistics_output <- cbind(statistics_output, rmsle)
if("NaN" %in% rmsle){
warning("rmsle could not be computed for some models due to negative values")
}
}
if("mape" %in% statistics){
mape <- apply(abs_pct_error, MAR=2, FUN=function(x) sum(x)/length(x))
statistics_output <- cbind(statistics_output, mape)
}
if("meape" %in% statistics){
meape <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, meape)
}
if("mrae" %in% statistics){
mrae <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x/baseline))
statistics_output <- cbind(statistics_output, mrae)
}
statistics_output <- as.matrix(statistics_output)
rownames(statistics_output) <- ifelse(colnames(predicted)==NULL, paste0("Model ",1:length(dim(statistics_output)[2])), colnames(predicted))
return(new("fitR", statistics=statistics_output))
}
)
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
current.code <- as.package("fitR")
load_all(current.code)
document(current.code)
check(current.code)
install(pkg="fitR", local = TRUE)
library(fitR)
stat_results <- fitRstats(true=true_values, predicted=predictions, naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
setMethod(f="fitRstats", # creating a method for fitRstats
definition=function(true, predicted, naive=NULL, statistics="rmse", ...){
if(!is.vector(true)==TRUE | !is.numeric(true)==TRUE){
stop("`true' values must be a vector of numeric values")
}
if(!is.vector(naive)==TRUE | !is.numeric(naive)==TRUE){
stop("`naive' values must be a vector of numeric values")
}
if(!is.matrix(predicted)==TRUE | !is.numeric(predicted)==TRUE){
stop("`predicted' values must be a matrix of numeric values")
}
statistics_output <- NULL
abs_error <- apply(predicted, MAR=2, FUN=function(x) abs(x - true))
abs_pct_error <- apply(predicted, MAR=2, FUN=function(x) ifelse(x==0, pi/2, atan(abs((x - true)/true))))
baseline <- abs(naive-true)
if("rmse" %in% statistics){
rmse <- apply(abs_error, MAR=2, FUN=function(x) sqrt(sum(x^2)/length(x)))
statistics_output <- cbind(statistics_output, rmse)
}
if("mad" %in% statistics){
mad <- apply(abs_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, mad)
}
if("rmsle" %in% statistics){
rmsle <- apply(predicted, MAR=2, FUN=function(x) sqrt(sum((log(x+1)-log(true+1))^2)/length(true)))
statistics_output <- cbind(statistics_output, rmsle)
if("NaN" %in% rmsle){
warning("rmsle could not be computed for some models due to negative values")
}
}
if("mape" %in% statistics){
mape <- apply(abs_pct_error, MAR=2, FUN=function(x) sum(x)/length(x))
statistics_output <- cbind(statistics_output, mape)
}
if("meape" %in% statistics){
meape <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x))
statistics_output <- cbind(statistics_output, meape)
}
if("mrae" %in% statistics){
mrae <- apply(abs_pct_error, MAR=2, FUN=function(x) median(x/baseline))
statistics_output <- cbind(statistics_output, mrae)
}
statistics_output <- as.matrix(statistics_output)
rownames(statistics_output) <- ifelse(colnames(predicted)==NULL, paste0("Model ",1:length(dim(statistics_output)[2])), colnames(predicted))
return(new("fitR", statistics=statistics_output))
}
)
stat_results <- fitRstats(true=true_values, predicted=predictions,
naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
stat_results
stat_results <- fitRstats(true=c("a",1,24,2), predicted=predictions,
naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
library(devtools)
library(roxygen2)
setwd("C:\\Users\\drmiller1220\\Documents\\GitHub\\PS5") #This will need to be changed to match your directory
## This is run once when the package structure is first created
## At this point put the *.R files into the correct directories and edit the DESCRIPTION file
# Now the NAMESPACE
## This can be run many times as the code is updates
current.code <- as.package("fitR")
load_all(current.code)
document(current.code)
check(current.code)
install(pkg="fitR", local = TRUE)
library(fitR)
uninstall("fitR")
current.code <- as.package("fitR")
load_all(current.code)
document(current.code)
check(current.code)
install(pkg="fitR", local = TRUE)
library(fitR)
stat_results <- fitRstats(true=true_values, predicted=predictions,
naive=naive_values, statistics = c("rmse","mad","meape",
"rmsle","mape","mrae"))
stat_results
