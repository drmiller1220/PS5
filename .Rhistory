library(rJava)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME = "C:/Program Files/Java/jdk1.8.0_121/")
library(rJava)
Sys.setenv(JAVA_HOME = "C://Program Files//Java//jdk1.8.0_121//")
library(rJava)
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jdk1.8.0_121\\")
library(rJava)
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jdk1.8.0_121")
library(rJava)
options(javahome = "C:\\Program Files\\Java\\jdk1.8.0_121")
library(rJava)
Sys.getenv("JAVA_HOME")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
library(rJava)
devtools::install_github(c("ropenscilabs/tabulizerjars", "ropenscilabs/tabulizer"), INSTALL_opts = "--no-multiarch")
library(tabulizer)
library(plyr)
array_x <- array(NA, dim=c(20,5,1000))
array_x <- aaply(.data = array_x, .margins = c(1,2,3), .fun = function(x) rnorm(1,0,10))
# 2) Here is the vector of covariates
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
# Make a function to create "Y" values (for a linear model).  The
# Y-values should be a linear combination of the X's plus some random
# noise.  The output should be a 20 by 1000 array.
X<-matrix(rnorm(100), ncol=5, nrow=20)
X[1,]
Beta
X%*%Beta
array_y <- aaply(.data = array_x, .margins=3, .fun = function(x, Beta) x%*%Beta + rnorm(1,0,1), Beta=Beta)
array_y <- array(t(array_y), dim=c(20,1,1000))
#3) Run 1,000 regressions across all of this simulated data.  Have as
#the output a 1000 by 6 matrix of estimated regression coefficients.
array_b <- matrix(sapply(1:1000, function(x) coef(lm(array_y[,,x]~array_x[,,x]))),
ncol = 6, byrow=TRUE)
View(array_b)
# 1) Make a three dimensional array with dim=c(20,5, 1000) and fill it with random data.
## Think of this as 1000 random datasets with 20 observations and 5 covariates
# Make a 20 x 5 x 1000 array filled with random data:
X <- array(rnorm(100000), dim=c(20, 5, 1000))
# Make a vector of covariates:
Beta <- matrix(c(1,2,0,4,0), ncol=1)
# Create Y values from X and Beta plus random noise:
Y <- apply(X, 3, function(x) x%*%Beta + rnorm(20))
#3) Run 1,000 regressions across all of this simulated data.  Have as
#the output a 1000 by 6 matrix of estimated regression coefficients.
lms <- matrix(sapply(1:1000, function(x) coef(lm(Y[,x] ~ X[,,x]))),
nrow=1000, ncol=6, byrow=TRUE)
View(lms)
# 1) Make a three dimensional array with dim=c(20,5, 1000) and fill it with random data.
## Think of this as 1000 random datasets with 20 observations and 5 covariates
array_x <- array(NA, dim=c(20,5,1000))
array_x <- aaply(.data = array_x, .margins = c(1,2,3), .fun = function(x) rnorm(1,0,10))
# 2) Here is the vector of covariates
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
# Make a function to create "Y" values (for a linear model).  The
# Y-values should be a linear combination of the X's plus some random
# noise.  The output should be a 20 by 1000 array.
X<-matrix(rnorm(100), ncol=5, nrow=20)
X[1,]
Beta
X%*%Beta
array_y <- aaply(.data = array_x, .margins=3, .fun = function(x, Beta) x%*%Beta + rnorm(20,0,1), Beta=Beta)
array_y <- array(t(array_y), dim=c(20,1,1000))
#3) Run 1,000 regressions across all of this simulated data.  Have as
#the output a 1000 by 6 matrix of estimated regression coefficients.
array_b <- matrix(sapply(1:1000, function(x) coef(lm(array_y[,,x]~array_x[,,x]))),
ncol = 6, byrow=TRUE)
View(array_b)
plot(density(array_b[,6]))
plot(density(array_b[,5]))
# Make a 20 x 5 x 1000 array filled with random data:
X <- array(rnorm(100000), dim=c(20, 5, 1000))
# Make a vector of covariates:
Beta <- matrix(c(1,2,0,4,0), ncol=1)
# Create Y values from X and Beta plus random noise:
Y <- apply(X, 3, function(x) x%*%Beta + rnorm(20))
#3) Run 1,000 regressions across all of this simulated data.  Have as
#the output a 1000 by 6 matrix of estimated regression coefficients.
lms <- matrix(sapply(1:1000, function(x) coef(lm(Y[,x] ~ X[,,x]))),
nrow=1000, ncol=6, byrow=TRUE)
#4) Create a density plot for each of the 6 coefficients (each of which should have been estimated 1,000 times).
getCol <- function(vec, mat){
which(apply(mat, 2, function(y) all.equal(vec, y)) == TRUE)
}
plotColumnDensity <- function(col, mat, colType='Coefficient'){
plot(density(col), main=paste('Density of', colType, getCol(col, mat)))
}
invisible(apply(lms, 2, function(x) plotColumnDensity(x, lms)))
# What does this represent?
View(array_b)
plots <- apply(array_b, 2, function(x) plot(density(x)))
apply(array_b, 2, function(x) plot(density(x)))
plots <- apply(array_b, 2, function(x) plot(density(x[1:6])))
plots <- apply(array_b, 2, function(x) plot(density(x[1])))
plots <- apply(array_b, 2, function(x) plot(density(x[1:10])))
View(array_b)
plots <- apply(array_b, 2, function(x) plot(density(x[])))
install.packages("parallel")
library(parallel)
detectCores()
library('doMC')
install.packages("doMC")
install.packages("foreach")
library('foreach')
?registerDoMC
library(DoMC)
no_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(no_cores)
stopCluster(cl)
no_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(no_cores)
array_y_parallel <- parApply(cl=cl, array_x, 3, function(x, Beta) x%*%Beta + rnorm(20), Beta=Beta)
clusterExport(cl=cl, 'Y')
array_b_parallel <- matrix(parSapply(cl=cl, 1:1000, function(x) coef(lm(array_y_parallel[,,x] ~ X[,,x]))),
nrow=1000, ncol=6, byrow=TRUE)
array_y_parallel <- parApply(cl=cl, array_x, 3, function(x, Beta) x%*%Beta + rnorm(20), Beta=Beta)
clusterExport(cl=cl, 'array_y_parallel')
array_b_parallel <- matrix(parSapply(cl=cl, 1:1000, function(x) coef(lm(array_y_parallel[,,x] ~ X[,,x]))),
nrow=1000, ncol=6, byrow=TRUE)
array_b_parallel <- matrix(parSapply(cl=cl, 1:1000, function(x) coef(lm(array_y_parallel[,x] ~ X[,,x]))),
nrow=1000, ncol=6, byrow=TRUE)
array_b_parallel <- matrix(parSapply(cl=cl, 1:1000, function(x) coef(lm(array_y_parallel[,x] ~ array_x[,,x]))),
nrow=1000, ncol=6, byrow=TRUE)
clusterExport(cl=cl, 'array_x')
array_b_parallel <- matrix(parSapply(cl=cl, 1:1000, function(x) coef(lm(array_y_parallel[,x] ~ array_x[,,x]))),
nrow=1000, ncol=6, byrow=TRUE)
clusterExport(cl=cl, 'array_b_parallel')
View(array_b_parallel)
plots <- parApply(array_b_parallel, 2, function(x) plot(density(x[])))
plots <- parApply(cl=cl, array_b_parallel, 2, function(x) plot(density(x[])))
plots <- parApply(cl=cl, array_b_parallel, 2, function(x) plot(density(x[])))
plots
clusterExport(cl=cl, 'plots')
plots
parApply(cl=cl, array_b_parallel, 2, function(x) plot(density(x[])))
plots <- parApply(cl=cl, array_b_parallel, 2, function(x) plot(density(x[1])))
plots <- parApply(cl=cl, array_b_parallel, 2, function(x) plot(density(x[,1])))
plots <- parApply(cl=cl, array_b_parallel, 2, function(x) plot(density(x[1,])))
plots <- parApply(cl=cl, array_b_parallel, 2, function(x) plot(density(x)))
clusterExport(cl=cl, 'plots')
plots
plots <- parApply(cl=cl, array_b_parallel, 2, function(x) plot(density(x[])))
install.packages("rvest")
library(rvest)
jm <- read_html("https://scholar.google.com/citations?user=GaWC-J4AAAAJ&hl=en&oi=ao")
citations <- jm %>% html_nodes ("gsc_g_al") %>% html_text()%>%as.numeric()
jm
jm[[2]]
jm[[1]]
citations <- html_nodes(jm, "gsc_g_al")
citations <- html_nodes(jm, ".gsc_g_al")
citations
html_text(citations)
citations_by_year <- html_text(citations)
citations_by_year <- as.numeric(html_text(citations))
html_nodes(jm, "#gsc_g_bars , .gsc_g_al")
html_nodes(jm, "#gsc_g_bars , .gsc_g_al")[1]
citations_by_year_jm <- data.frame(year=seq(from=2009, to=2017,by=1), as.numeric(html_text(citations))
)
View(citations_by_year_jm)
citations_by_year_jm <- data.frame(year=seq(from=2009, to=2017,by=1),
cites=as.numeric(html_text(citations)))
plot(citations_by_year_jm$year, citations_by_year_jm$cites)
plot(citations_by_year_jm$year, citations_by_year_jm$cites, type="l")
plot(citations_by_year_jm$year, citations_by_year_jm$cites, type="l",
ylim=c(0,100))
js <- read_html("https://scholar.google.com/citations?user=bgkXKMkAAAAJ&hl=en")
citations_js <- html_nodes(js, ".gsc_g_al")
cite_extractor <- function(link){
profile <- read_html(link)
citations <- html_nodes(profile, ".gsc_g_al")
citations_by_year <- data.frame(year=seq(from=2009, to=2017,by=1),
cites=as.numeric(html_text(citations)))
return(citations_by_year)
}
js <- cite_extractor("https://scholar.google.com/citations?user=bgkXKMkAAAAJ&hl=en")
View(js)
js <- NULL
js <- cite_extractor("https://scholar.google.com/citations?user=bgkXKMkAAAAJ&hl=en")
View(js)
jm <- cite_extractor("https://scholar.google.com/citations?user=GaWC-J4AAAAJ&hl=en&oi=ao")
jm <- read_html("https://scholar.google.com/citations?user=GaWC-J4AAAAJ&hl=en&oi=ao")
citations_jm <- html_nodes(jm, "#gsc_prf_in , #gsc_g_bars , .gsc_g_al")
citations_jm
html_text(citations_jm)
profile <- jm
jm
name <- html_text(html_nodes(profile, "#gsc_prf_in , #gsc_g_bars , .gsc_g_al"))[1]
name
cite_extractor <- function(link){
profile <- read_html(link)
name <- html_text(html_nodes(profile, "#gsc_prf_in , #gsc_g_bars , .gsc_g_al"))[1]
citations <- html_nodes(profile, ".gsc_g_al")
citations_by_year <- data.frame(year=seq(from=2009, to=2017,by=1),
cites=as.numeric(html_text(citations)))
list_object <- list(name=name, citations=citations_by_year)
return(list_object)
}
jm <- cite_extractor("https://scholar.google.com/citations?user=GaWC-J4AAAAJ&hl=en&oi=ao")
jm
jm[[2]]
plot(jm[[2]][,1])
jm[[2]][,1]
plot(jm[[2]][,2])
plot(y=jm[[2]][,2], x=jm[[2]][,1])
plot(y=jm[[2]][,2], x=jm[[2]][,1], type="l", ylim=c(0,100))
plot(y=jm[[2]][,2], x=jm[[2]][,1], type="l", ylim=c(0,100), col="blue")
js <- cite_extractor("https://scholar.google.com/citations?user=bgkXKMkAAAAJ&hl=en")
js
plot(y=jm[[2]][,2], x=jm[[2]][,1], type="l", ylim=c(0,500), col="blue",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][,2], x=js[[2]][,1], type="l", col="green")
db <- cite_extractor("https://scholar.google.com/citations?user=1bWh6jsAAAAJ&hl=en")
lines(y=db[[2]][,2], x=js[[2]][,1], type="l", col="red")
ar <- cite_extractor("https://scholar.google.com/citations?user=xPSRkX4AAAAJ&hl=en")
lines(y=ar[[2]][,2], x=ar[[2]][,1], type="l", col="red")
lines(y=ar[[2]][,2], x=ar[[2]][,1], type="l", col="maroon")
plot(y=jm[[2]][,2], x=jm[[2]][,1], type="l", ylim=c(0,400), col="blue",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][,2], x=js[[2]][,1], type="l", col="green")
lines(y=db[[2]][,2], x=js[[2]][,1], type="l", col="red")
lines(y=ar[[2]][,2], x=ar[[2]][,1], type="l", col="maroon")
jf <- cite_extractor("https://scholar.google.com/citations?user=uTvm88kAAAAJ&hl=en")
lines(y=jf[[2]][,2], x=jf[[2]][,1], type="l", col="maroon")
plot(y=jm[[2]][,2], x=jm[[2]][,1], type="l", ylim=c(0,350), col="blue",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][,2], x=js[[2]][,1], type="l", col="green")
lines(y=db[[2]][,2], x=js[[2]][,1], type="l", col="red")
lines(y=ar[[2]][,2], x=ar[[2]][,1], type="l", col="maroon")
lines(y=jf[[2]][,2], x=jf[[2]][,1], type="l", col="orange")
plot(y=jm[[2]][,2], x=jm[[2]][,1], type="l", ylim=c(0,350), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][,2], x=js[[2]][,1], type="l", col="green")
lines(y=db[[2]][,2], x=js[[2]][,1], type="l", col="red")
lines(y=ar[[2]][,2], x=ar[[2]][,1], type="l", col="maroon")
lines(y=jf[[2]][,2], x=jf[[2]][,1], type="l", col="blue")
plot(y=jm[[2]][,2], x=jm[[2]][,1], type="l", ylim=c(0,350), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][,2], x=js[[2]][,1], type="l", col="green")
lines(y=db[[2]][,2], x=js[[2]][,1], type="l", col="red")
lines(y=ar[[2]][,2], x=ar[[2]][,1], type="l", col="maroon")
lines(y=jf[[2]][,2], x=jf[[2]][,1], type="l", col="goldenrod1")
plot(y=jm[[2]][1:8,2], x=jm[[2]][1:8,1], type="l", ylim=c(0,350), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="green")
lines(y=db[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="red")
lines(y=ar[[2]][1:8,2], x=ar[[2]][1:8,1], type="l", col="maroon")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="goldenrod1")
bs <- cite_extractor("https://scholar.google.com/citations?user=USx6U-MAAAAJ&hl=en")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate1")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="gold")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
jg <- cite_extractor("https://scholar.google.com/citations?user=O1MDOAUAAAAJ&hl=en")
jg
plot(y=jm[[2]][1:8,2], x=jm[[2]][1:8,1], type="l", ylim=c(0,550), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="green")
lines(y=db[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="darkred")
lines(y=ar[[2]][1:8,2], x=ar[[2]][1:8,1], type="l", col="maroon")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="gold")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
lines(y=jg[[2]][1:8,2], x=jg[[2]][1:8,1], type="l", col="red")
db[[1]]
layout(matrix(c(1,2), ncol=1, byrow=TRUE), heights = c(0.8,0.2))
plot(y=jm[[2]][1:8,2], x=jm[[2]][1:8,1], type="l", ylim=c(0,550), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="forestgreen")
lines(y=db[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="darkred")
lines(y=ar[[2]][1:8,2], x=ar[[2]][1:8,1], type="l", col="maroon")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="gold")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
lines(y=jg[[2]][1:8,2], x=jg[[2]][1:8,1], type="l", col="red")
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="")
legend("center",legend=c(db[[1]],jf[[1]],jg[[1]],jm[[1]],ar[[1]],bs[[1]],js[[1]]),
col=c("darkred","gold","red","blue4","maroon","chocolate2","forestgreen"),
lty = c(1,1,1,1,1,1,1))
dev.off()
layout(matrix(c(1,2), ncol=1, byrow=TRUE), heights = c(0.7,0.3))
plot(y=jm[[2]][1:8,2], x=jm[[2]][1:8,1], type="l", ylim=c(0,550), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="forestgreen")
lines(y=db[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="darkred")
lines(y=ar[[2]][1:8,2], x=ar[[2]][1:8,1], type="l", col="maroon")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="gold")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
lines(y=jg[[2]][1:8,2], x=jg[[2]][1:8,1], type="l", col="red")
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="")
legend("center",legend=c(db[[1]],jf[[1]],jg[[1]],jm[[1]],ar[[1]],bs[[1]],js[[1]]),
col=c("darkred","gold","red","blue4","maroon","chocolate2","forestgreen"),
lty = c(1,1,1,1,1,1,1))
dev.off()
layout(matrix(c(1,2), ncol=1, byrow=TRUE), heights = c(0.6,0.4))
plot(y=jm[[2]][1:8,2], x=jm[[2]][1:8,1], type="l", ylim=c(0,550), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="forestgreen")
lines(y=db[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="darkred")
lines(y=ar[[2]][1:8,2], x=ar[[2]][1:8,1], type="l", col="maroon")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="gold")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
lines(y=jg[[2]][1:8,2], x=jg[[2]][1:8,1], type="l", col="red")
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="")
legend("center",legend=c(db[[1]],jf[[1]],jg[[1]],jm[[1]],ar[[1]],bs[[1]],js[[1]]),
col=c("darkred","gold","red","blue4","maroon","chocolate2","forestgreen"),
lty = c(1,1,1,1,1,1,1))
layout(matrix(c(1,2), ncol=2, byrow=FALSE), widths =  = c(0.6,0.4))
plot(y=jm[[2]][1:8,2], x=jm[[2]][1:8,1], type="l", ylim=c(0,550), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="forestgreen")
lines(y=db[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="darkred")
lines(y=ar[[2]][1:8,2], x=ar[[2]][1:8,1], type="l", col="maroon")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="gold")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
lines(y=jg[[2]][1:8,2], x=jg[[2]][1:8,1], type="l", col="red")
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="")
legend("center",legend=c(db[[1]],jf[[1]],jg[[1]],jm[[1]],ar[[1]],bs[[1]],js[[1]]),
col=c("darkred","gold","red","blue4","maroon","chocolate2","forestgreen"),
lty = c(1,1,1,1,1,1,1))
dev.off()
layout(matrix(c(1,2), ncol=2, byrow=FALSE), widths = c(0.6,0.4))
plot(y=jm[[2]][1:8,2], x=jm[[2]][1:8,1], type="l", ylim=c(0,550), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="forestgreen")
lines(y=db[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="darkred")
lines(y=ar[[2]][1:8,2], x=ar[[2]][1:8,1], type="l", col="maroon")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="gold")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
lines(y=jg[[2]][1:8,2], x=jg[[2]][1:8,1], type="l", col="red")
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="")
legend("center",legend=c(db[[1]],jf[[1]],jg[[1]],jm[[1]],ar[[1]],bs[[1]],js[[1]]),
col=c("darkred","gold","red","blue4","maroon","chocolate2","forestgreen"),
lty = c(1,1,1,1,1,1,1))
dev.off()
layout(matrix(c(1,2), ncol=2, byrow=FALSE), widths = c(0.7,0.3))
plot(y=jm[[2]][1:8,2], x=jm[[2]][1:8,1], type="l", ylim=c(0,550), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="forestgreen")
lines(y=db[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="darkred")
lines(y=ar[[2]][1:8,2], x=ar[[2]][1:8,1], type="l", col="maroon")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="gold")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
lines(y=jg[[2]][1:8,2], x=jg[[2]][1:8,1], type="l", col="red")
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="")
legend("center",legend=c(db[[1]],jf[[1]],jg[[1]],jm[[1]],ar[[1]],bs[[1]],js[[1]]),
col=c("darkred","gold","red","blue4","maroon","chocolate2","forestgreen"),
lty = c(1,1,1,1,1,1,1))
dev.off()
layout(matrix(c(1,2), ncol=2, byrow=FALSE), widths = c(0.65,0.35))
plot(y=jm[[2]][1:8,2], x=jm[[2]][1:8,1], type="l", ylim=c(0,550), col="blue4",
xlab="Year", ylab="Cites", main="Citations per Year Among Selected WashU\n Poli Sci Faculty")
lines(y=js[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="forestgreen")
lines(y=db[[2]][1:8,2], x=js[[2]][1:8,1], type="l", col="darkred")
lines(y=ar[[2]][1:8,2], x=ar[[2]][1:8,1], type="l", col="maroon")
lines(y=jf[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="gold")
lines(y=bs[[2]][1:8,2], x=jf[[2]][1:8,1], type="l", col="chocolate2")
lines(y=jg[[2]][1:8,2], x=jg[[2]][1:8,1], type="l", col="red")
par(mar=c(0,0,0,0))
plot(0,0, type="n", axes=FALSE, xlab="", ylab="")
legend("center",legend=c(db[[1]],jf[[1]],jg[[1]],jm[[1]],ar[[1]],bs[[1]],js[[1]]),
col=c("darkred","gold","red","blue4","maroon","chocolate2","forestgreen"),
lty = c(1,1,1,1,1,1,1))
library(squaresPack)
?squaresPack
remove.packages("squaresPack")
library(squaresPack)
multiplySquares(1,2)
remove.packages(squaresPack)
remove.packages("squaresPack")
alarm
alarm()
alarm()
alarm()
alarm()
alarm()
library(squaresPack)
multiplySquares(1,2)
setwd("C:\\Users\\drmiller1220\\Documents\\GitHub\\PS5") #setting working directory
library(foreign) # need library foreign to read in .dta file
anes_data <- read.dta("anes_timeseries_2012_stata12.dta") # load in data
sample_rows <- sample(1:nrow(anes_data), size = 0.5*nrow(anes_data))
# get vector of numbers from 1 to the number of rows in the data set, and then sample
# a vector of numbers half that size with which to determine our training and test sets
training_set <- anes_data[sample_rows,] # training set includes all rows sampled
test_set <- anes_data[-sample_rows,] # test set includes all rows not sampled
install.packages("vglm")
install.packages("VGAM")
library(VGAM) # loading package needed for tobit regression
tobit_model <- tobit(ft_dpc ~ pid_x, left = 0, right = 100, dist = "gaussian", data=training_set)
tobit_model <- vglm(ft_dpc ~ pid_x, tobit(Lower = 0, Upper = 100, type.f="cens"), data=training_set)
summary(tobit_model)
predict(tobit_model)
VGAM::predict(tobit_model)
VGAM::predict(training_set, tobit_model)
tobit_model <- vglm(ft_dpc ~ pid_x, tobit(Lower = 0, Upper = 100, type.fitted="censored"), data=training_set)
summary(tobit_model)
predict(tobit_model, training_set, type="response")
anes_data_subset <- subset(anes_data, with=c("ft_dpc","pid_x","teat_supp_x","aidblack_self",
"aidblack_dpc","presapp_job_x",
"interest_attention","dem_raceeth_x",
"gender_respondent_x"))
anes_data_subset <- subset(anes_data, select=c("ft_dpc","pid_x","teat_supp_x","aidblack_self",
"aidblack_dpc","presapp_job_x",
"interest_attention","dem_raceeth_x",
"gender_respondent_x"))
anes_data_subset <- subset(anes_data, select=[,c("ft_dpc","pid_x","teat_supp_x","aidblack_self",
"aidblack_dpc","presapp_job_x",
anes_data_subset <- subset(anes_data, select=c(ft_dpc,pid_x,teat_supp_x,aidblack_self,
aidblack_dpc,presapp_job_x,
interest_attention,dem_raceeth_x,
gender_respondent_x)])
anes_data_subset <- subset(anes_data, select=c(ft_dpc,pid_x,teat_supp_x,aidblack_self,
aidblack_dpc,presapp_job_x,
interest_attention,dem_raceeth_x,
gender_respondent_x))
anes_data_subset <- subset(anes_data, select=c(ft_dpc,pid_x,tea_supp_x,aidblack_self,
aidblack_dpc,presapp_job_x,
interest_attention,dem_raceeth_x,
gender_respondent_x))
View(anes_data_subset)
levels(anes_data_subset$pid_x)
levels(anes_data_subset$pid_x) <- list("1. Strong Democrat"="strong_dem",
"2. Not very strong Democract"="weak_dem",
"3. Independent-Democrat" ="ind_dem",
"4. Independent"="ind",
"5. Independent-Republican"="ind_gop",
"6. Not very strong Republican"="weak_gop",
"7. Strong Republican"="strong_gop")
anes_data_subset$pid_x
levels(anes_data_subset$pid_x) <- list("1. Strong Democrat"="strong_dem",
"2. Not very strong Democract"="weak_dem",
"3. Independent-Democrat" ="ind_dem",
"4. Independent"="ind",
"5. Independent-Republican"="ind_gop",
"6. Not very strong Republican"="weak_gop",
"7. Strong Republican"="strong_gop")
anes_data_subset$pid_x
levels(anes_data_subset$pid_x) <- list("strong_dem"="1. Strong Democrat",
"2. Not very strong Democract"="weak_dem",
"3. Independent-Democrat" ="ind_dem",
"4. Independent"="ind",
"5. Independent-Republican"="ind_gop",
"6. Not very strong Republican"="weak_gop",
"7. Strong Republican"="strong_gop")
anes_data_subset$pid_x
levels(anes_data_subset$pid_x) <- list("strong_dem"="1. Strong Democrat",
"weak_dem"="2. Not very strong Democract",
"ind_dem"="3. Independent-Democrat",
"ind"="4. Independent",
"ind_gop"="5. Independent-Republican",
"weak_gop"="6. Not very strong Republican",
"strong_gop"="7. Strong Republican")
anes_data_subset$pid_x
table(anes_data_subset$pid_x)
sum(is.na(anes_data_subset$pid_x))
levels(anes_data_subset$tea_supp_x)
levels(anes_data_subset$tea_supp_x) <- list("strong_supp"="1. Strong support" ,
"weak_supp"="2. Not very strong support",
"lean_supp"="3. Lean toward supporting",
"indiff"="4. Do not lean either way",
"lean_opp"="5. Lean toward opposing",
"weak_opp"="6. Not very strong opposition",
"strong_opp"="7. Strong opposition")
anes_data_subset$tea_supp_x
levels(anes_data_subset$presapp_job_x)
levels(anes_data_subset$presapp_job_x) <- list("strong_app"="1. Approve strongly",
"weak_app"="2. Approve not strongly",
"weak_disapp"="4. Disapprove not strongly",
"strong_disapp"="5. Disapprove strongly")
levels(anes_data_subset$interest_attention)
levels(anes_data_subset$interest_attention) <- list("always"="1. Always",
"most"="2. Most of the time",
"half"="3. About half the time",
"some"="4. Some of the time",
"never"="5. Never")
levels(anes_data_subset$dem_raceeth_x)
levels(anes_data_subset$dem_raceeth_x) <- list("white"="1. White non-Hispanic",
"black"="2. Black non-Hispanic",
"hispanic"="3. Hispanic",
"other"="4. Other non-Hispanic")
levels(anes_data_subset$gender_respondent_x)
levels(anes_data_subset$gender_respondent_x) <- list("male"="1. Male",
"female"="2. Female")
anes_data_subset$aidblack_self <- ifelse(anes_data_subset$aidblack_self<0, NA, anes_data_subset$aidblack_self)
anes_data_subset$aidblack_dpc <- ifelse(anes_data_subset$aidblack_dpc<0, NA, anes_data_subset$aidblack_self)
library(mice)
data_sets <- mice(anes_data_subset, m=5)
data_sets[1]
data_sets$data$ft_dpc
data_sets$data$pid_x
data_sets$data$dem_raceeth_x
is.ordered(anes_data_subset$pid_x)
x <- as.ordered(anes_data_subset$pid_x)
x
anes_data_subset$pid_x <- as.ordered(anes_data_subset$pid_x)
anes_data_subset$tea_supp_x <- as.ordered(anes_data_subset$tea_supp_x)
anes_data_subset$presapp_job_x <- as.ordered(anes_data_subset$presapp_job_x)
anes_data_subset$interest_attention <- as.ordered(anes_data_subset$interest_attention)
is.ordered(anes_data_subset$interest_attention)
